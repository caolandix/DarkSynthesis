#include <QtWidgets>

#include "physeqsolver.h"
#include "physeqsolverdelegate.h"
#include "physeqsolveritem.h"
#include "physprintview.h"
#include "physeqsolvertable.h"
#include "physdataobj.h"
#include "physeqgrid.h"
#include "physcalculatetimer.h"
#include "phystimeslicedataobj.h"

PhysEqSolver::PhysEqSolver(int rows, int cols, QWidget *pParent) : QTableView(pParent) {
    m_pTable = NULL;
    m_pGrid = NULL;
    m_pFormulaInput = new QLineEdit();
    m_pCalcTimer = new PhysCalculateTimer(this, 1000);
    m_pCalcTimer ->start();
    createTable(rows, cols);
    setupContextMenu();
    createConnections();
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);

}

void PhysEqSolver::createConnections() {
    connect(m_pTable, SIGNAL(currentItemChanged(QTableWidgetItem *, QTableWidgetItem *)), this, SLOT(updateLineEdit(QTableWidgetItem *)));
    connect(m_pFormulaInput, SIGNAL(returnPressed()), this, SLOT(returnPressed()));
    connect(m_pTable, SIGNAL(itemChanged(QTableWidgetItem *)), this, SLOT(updateLineEdit(QTableWidgetItem *)));
    connect(m_pTable, SIGNAL(addPhysEqSolverRow(QList<PhysParticle *>)), this, SLOT(onAddPhysEqSolverRow(QList<PhysParticle *>)));
    connect(m_pCalcTimer ->Timer(), SIGNAL(timeout()), this, SLOT(onCalculate()));
    connect(m_pTable, SIGNAL(createTimeSliceRow(QList<double>)), this, SLOT(onCreateTimeSliceRow(QList<double>)));
    connect(m_pTable, SIGNAL(addTimeSliceCell(int, double)), this, SLOT(onAddTimeSliceCell(int, double)));
    connect(m_pTable, SIGNAL(removeTimeSliceCell(int, double)), this, SLOT(onRemoveTimeSliceCell(int, double)));
}

void PhysEqSolver::onUpdateParticleName(const QString prevName, const QString name) {
    foreach (PhysEqRow *pRow, m_lstRows) {
        if (pRow ->Type() == PhysEqRow::RT_PARTICLE) {
            /*
            pRow ->DataObj() ->Name().compare(prevName)
            if ((pObj) && pObj ->Name().compare(prevName) == 0) {

            }
            */
        }
    }
}

void PhysEqSolver::createTable(const int rows, const int cols) {
    m_pTable = new PhysEqSolverTable(rows, cols, this);
    setupTableLookAndFeel();

    // Creates the underlying data structure for doing calculations
    createGrid();
}

void PhysEqSolver::setupTableLookAndFeel() {
    QColor titleBackground(Qt::lightGray);
    QFont titleFont = m_pTable -> font();
    titleFont.setBold(true);

    m_pTable -> setItem(0, 0, new PhysEqSolverItem(""));
    m_pTable -> item(0, 0) -> setBackgroundColor(titleBackground);
    m_pTable -> item(0, 0) -> setFont(titleFont);
}

void PhysEqSolver::createGrid() {
    m_pGrid = new PhysEqGrid();
}

QTableWidgetItem *PhysEqSolver::createTableItem(PhysDataObj *pObj, bool bAttachObj) {
    QTableWidgetItem *pItem = new QTableWidgetItem(pObj ->Name());
    pItem ->setFlags(Qt::ItemIsEnabled | Qt::ItemIsSelectable);
    if (bAttachObj) {
        QVariant var;
        var.setValue(pObj);
        pItem ->setData(Qt::UserRole, var);
    }
    return pItem;
}


// Creates both the initial row and the first time slice item
void PhysEqSolver::onCreateTimeSliceRow(QList<double> lstTimeSlices) {

    // Create the first row...
    PhysEqRow *pRow = new PhysEqRow(PhysEqRow::RT_TIMESLICE);
    m_lstRows.push_back(pRow);
    pRow->Addy(EncodeAddy(m_lstRows.count()));

    // Insert the first cell in the row
    onAddTimeSliceCell(0, lstTimeSlices.at(0));
}

void PhysEqSolver::onAddTimeSliceCell(int idx, double val) {
    QString Addy = EncodeAddy(0, idx);
    PhysEqRow *pRow = m_lstRows.at(0);
    if (pRow) {
        PhysEqGridCell *pCell = new PhysEqGridCell(new PhysTimeSliceDataObj(val), Addy);
        pRow ->addCell(pCell);
    }
}

// Need to do. Will wait for creation to work first...
void PhysEqSolver::onRemoveTimeSliceCell(int idx) {
    int row = idx, col;
}

void PhysEqSolver::addPhysDataObjCell(PhysDataObj *pObj) {

}

// Visual insertion only
QTableWidgetItem *PhysEqSolver::createRowItem(PhysParticleDataObj *pObj) {
    return createTableItem(pObj, true);
}

// The difference between this one and the particles is that particles do not get a PhysEqRow entry as
// their information is not necessary for doing calculations...
QTableWidgetItem *PhysEqSolver::createRowItem(PhysVectorDataObj *pObj) {
    PhysEqRowProps *pRowProps = new PhysEqRowProps(pObj);
    PhysEqRow *pRow = new PhysEqRow(pRowProps);
    m_lstRows.push_back(pRow);

    return createTableItem(pObj);
}

void PhysEqSolver::createParticleItems(int i, PhysParticle *pParticle) {
    switch (ModType()) {
    case SINGLEDIM_KINEMATICS:
        create1DKinematicItems(i, pParticle);
        break;
    default:
        qDebug("PhysEqSolver::createParticleItems(): Invalid Module type");
        break;
    }
}

void PhysEqSolver::create1DKinematicItems(int i, PhysParticle *pParticle) {

    // create the Acceleration, Velocity, Gravity, displacement vectors
    // Important parameters are:
    //      - variable name
    //      - equation that defines it
    //      - boolean value that determines if it is to be drawn or not
    //      - Angle at which it should be represented on the CartesianGraph (if any)
    //      - Magnitude, or the value of the vector
    QList<PhysVector *> lst;
    lst.push_front(new PhysVector(pParticle ->Parent(), pParticle,
                                        QString("Ax"), QString("diff(dx/dv)"), QString("Ax"), false));
    lst.push_front(new PhysVector(pParticle ->Parent(), pParticle,
                                        QString("Ay"), QString("diff(dy/dv)"), QString("Ay"), false));
    lst.push_front(new PhysVector(pParticle ->Parent(), pParticle,
                                           QString("Vx"), QString(""), QString("Vx"), false));
    lst.push_front(new PhysVector(pParticle ->Parent(), pParticle,
                                           QString("Vy"), QString(""), QString("Vy"), false));
    lst.push_front(new PhysVector(pParticle ->Parent(), pParticle,
                                               QString("X"), QString(""), QString("X"), false));
    lst.push_front(new PhysVector(pParticle ->Parent(), pParticle,
                                               QString("Y"), QString(""), QString("Y"), false));

    foreach(PhysVector *item, lst) {
        m_pTable ->insertRow(i);
        m_pTable ->setItem(i, 0, createRowItem(item ->DataObj()));
    }
}

void PhysEqSolver::onAddPhysEqSolverRow(QList<PhysParticle *> lstParticles) {
    qDebug("PhysEqSolver::onAddPhysEqSolverRow");

    m_pCalcTimer ->stop();

    int i = 0;
    foreach(PhysParticle *pParticle, lstParticles) {
        // Create entry in underlying data structure used for doing the mathematics

        // Insert and populate UI row
        m_pTable ->insertRow(m_pTable ->rowCount());
        m_pTable ->setItem(i++, 0, createRowItem(pParticle ->DataObj()));
        createParticleItems(i, pParticle);
    }
    m_pCalcTimer ->start();
}

void PhysEqSolver::onCalculate() {
    qDebug("PhysEqSolver::onCalculate()");

    if (m_pTable ->rowCount() > 0) {

    }
}

void PhysEqSolver::updateLineEdit(QTableWidgetItem *pItem) {
    if (pItem) {
        if (pItem == m_pTable -> currentItem()) {
            if (pItem)
                m_pFormulaInput -> setText(pItem -> data(Qt::EditRole).toString());
            else
                m_pFormulaInput -> clear();
        }
    }
}

void PhysEqSolver::returnPressed() {
    QString text = m_pFormulaInput -> text();
    int row = m_pTable -> currentRow();
    int col = m_pTable -> currentColumn();
    QTableWidgetItem *pItem = m_pTable -> item(row, col);
    if (!pItem)
        m_pTable -> setItem(row, col, new PhysEqSolverItem(text));
    else
        pItem -> setData(Qt::EditRole, text);
    m_pTable -> viewport() -> update();
}

void PhysEqSolver::setupContextMenu() {
    setContextMenuPolicy(Qt::ActionsContextMenu);
}

void PhysEqSolver::DecodeAddy(const QString addy, int *pRow, int *pCol) {
    if (addy.isEmpty()) {
        *pCol = -1;
        *pRow = -1;
    }
    else {
        bool bOk;
        QStringList lstAddyParts = addy.split(":");
        QString row = lstAddyParts.at(0);
        *pRow = row.toUInt(&bOk, 16);
        if (pCol) {
            QString col = lstAddyParts.at(1);
            *pCol = col.toUInt(&bOk, 16);
        }
    }
}

QString PhysEqSolver::EncodeAddy(const int row, const int col) {
    QString rowHex, columnHex;

    rowHex.sprintf("%x", row);
    if (col == -1)
        return rowHex;
    columnHex.sprintf("%x", col);
    return QString(rowHex + ":" + columnHex);
}

